DESImage examples
=================

Prepare to run examples::

  >>> import numpy as np
  >>> from despyfits.DESImage import DESDataImage, DESImage

Load data from one HDU of a raw FITS data file, and look at the data
and header::

  >>> fname = '/data/des30.b/data/DTS/src/20130928/src/DECam_00239341.fits.fz'
  >>> refrawfits = DESDataImage.load(fname, 12)
  >>> print refrawfits.data.shape, np.mean(refrawfits.data)
  (4146, 2160) 2095.3814769
  >>> print refrawfits['EQUINOX']
  2000.0

Load data from one HDU of a reduced data file, and look at the data
and header::

  >>> fname = '/data/des30.a/data/yanny/oframe/zrun/d239341/DECam_00239341_14.fits.fz'
  >>> refredfits = DESDataImage.load(fname)
  >>> print refredfits.data.shape, np.mean(refredfits.data)
  (4096, 2048) 352.287109375
  >>> print refredfits['EQUINOX']
  2000.0

Generate a new data image from scratch, without setting any header values::

  >>> d = np.zeros((4096, 2048),dtype=np.float32)
  >>> ddi = DESDataImage(d)
  >>> print ddi.data.shape, np.mean(ddi.data)
  (4096, 2048) 0.0


Generate a new data image from scratch, setting some header values::

  >>> hdr = {'ISLAND': 'Hawaii',
  ...        'DOG': 'spaniel'}
  >>> d = np.zeros((2048,4096),dtype=np.float32)
  >>> ddi = DESDataImage(d, hdr)
  >>> print ddi.data.shape, np.mean(ddi.data)
  (2048, 4096) 0.0
  >>> print 'dog: ', ddi['DOG']
  dog:  spaniel
  >>> print 'island: ', ddi['ISLAND']
  island:  Hawaii

Add an new header keyword::

  >>> ddi['TREE'] = 'oak'
  >>> print 'tree: ', ddi['TREE']
  tree:  oak

Update an existing header keyword::

  >>> ddi['dog'] = 'husky'
  >>> print 'dog: ', ddi['DOG']
  dog:  husky

Save our data image in a FITS file, and load it again to verify that
we get back what we put in::

  >>> ddi.save('foo.fits')
  >>> newddi = DESDataImage.load('foo.fits')
  >>> print 'dog: ', newddi['DOG']
  dog:  husky   
  >>> print newddi.data.shape, np.mean(newddi.data)
  (2048, 4096) 0.0

Save our data image into a different HDU::

  >>> ddi.save('foo.fits',2)
  >>> newddi2 = DESDataImage.load('foo.fits',2)
  >>> print newddi2.data.shape, np.mean(newddi2.data)
  (2048, 4096) 0.0

Create an image with a weight and mask::

  >>> im = DESImage.create(DESDataImage(np.zeros((4096,2049))))
  >>> print im.data.shape, im.mask.shape, im.weight.shape
  (4096, 2049) (4096, 2049) (4096, 2049)
  >>> print im.data.dtype, im.mask.dtype, im.weight.dtype
  float64 uint16 float32

Save our new image with weight and mask, reading back to verify that
we get back what we put in::

  >>> test_fname = 'bar.fits'
  >>> im.save(test_fname)
  >>> im2 = DESImage.load(test_fname)
  >>> print im2.data.shape, im2.mask.shape, im2.weight.shape
  (4096, 2049) (4096, 2049) (4096, 2049)
  >>> print im2.data.dtype, im2.mask.dtype, im2.weight.dtype
  float64 uint16 float32

Read an image with data, weight, and mask generated by the pipeline::

  >>> fname = '/data/des30.a/data/yanny/oframe/zrun/d239341/DECam_00239341_14.fits.fz'
  >>> im = DESImage.load(fname)
  >>> print im.data.shape, im.mask.shape, im.weight.shape
  (4096, 2048) (4096, 2048) (4096, 2048)
  >>> print im.data.dtype, im.mask.dtype, im.weight.dtype
  float32 uint16 float32
  >>> print np.mean(im.data), np.mean(im.mask), np.mean(im.weight)
  352.287109375 11.4458514452 0.0126160364598
